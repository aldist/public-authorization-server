#
# Here we tell Spring Boot to use PostgreSQL as our data source
# Hibernate is an implementation of JPA (Java Persistence API) and is responsible for entity management, query submission, etc
# More on that: https://www.callicoder.com/spring-boot-jpa-hibernate-postgresql-restful-crud-api-example/
#
## Spring DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
spring.datasource.url=jdbc:dbtype://dbUrl/db
spring.datasource.username=user
spring.datasource.password=password
# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.[specificDialect]
# Hibernate ddl auto (create, create-drop, validate, update), for automatically creating tables in db based on entities in Spring
spring.jpa.hibernate.ddl-auto = update


#
# local webserver config
#
#server.servlet.context-path=/spring-security-oauth-server
server.port=1337


#
# jwt config
# access: 1h, refresh: 14d
secret.jwt.access-token-key=secretKey
secret.jwt.access-token-validity-sec=1337
secret.jwt.refresh-token-validity-sec=113377


#
# clients config
#
client.id1=clientname
client.secret1=secret
client.grant-types1=password, refresh_token
client.scopes1=read, write

client.id2=clientname
client.secret2=secret
client.grant-types2=password, refresh_token, implicit, ...
client.scopes2=read, write, whatever